package com.javarush.task.task14.task1419;

import java.io.IOException;
import java.nio.file.FileSystemException;
import java.rmi.NotBoundException;
import java.rmi.activation.ActivationException;

import java.util.ArrayList;
import java.util.List;

/* 
Нашествие исключений
*/

public class Solution {
    public static List<Exception> exceptions = new ArrayList<Exception>();

    public static void main(String[] args) {
        initExceptions();

       for (Exception exception : exceptions) {
           System.out.println(exception);

       }
    }

    private static void initExceptions() {   //the first exception
        try {
            float i = 1 / 0;

        }
        catch (ArithmeticException  e) {
            exceptions.add(e);
        }
        try{
            int[] arr = new int[1];
            arr[2]=3;
        }
        catch (ArrayIndexOutOfBoundsException  e) {
            exceptions.add(e);
        }
        try{
            String g=null;
            System.out.println(g.toString());
        }
        catch (NullPointerException  e) {
            exceptions.add(e);
        }
        try{
            ArrayList<Integer> bound = new ArrayList<>();
            bound.add(23);
            bound.add(23);
            System.out.println(bound.get(2));
        }

        catch (IndexOutOfBoundsException  e) {
            exceptions.add(e);
        }
        try{Integer aIntegerObj = new Integer("one");}
        catch (NumberFormatException e) {
            exceptions.add(e);
        }
        try{
            Object x[] = new String[3];
            x[0] = new Integer(0);
        }
        catch (ArrayStoreException  e) {
            exceptions.add(e);
        }
        try{
            Object i = Integer.valueOf(42);
            String s = (String)i;
        }
        catch (ClassCastException  e) {
            exceptions.add(e);
        }
        try{throw new IllegalArgumentException( );}
        catch (IllegalArgumentException   e) {
            exceptions.add(e);
        }
        try{throw new NegativeArraySizeException();}
        catch (NegativeArraySizeException     e) {
            exceptions.add(e);
        }
        try{throw new UnsupportedOperationException();}

        catch (UnsupportedOperationException     e) {
            exceptions.add(e);
        }

              //напишите тут ваш код

    }
}
